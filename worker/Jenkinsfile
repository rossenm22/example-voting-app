pipeline {

    agent none


    stages{
        stage('build'){
            agent {
                docker {
                    image 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            when {
                changeset "**/worker/**"
            }
            steps {
               echo 'Compiling worker app'
               dir('worker'){
                sh 'mvn compile'
                }
            }
        }
        stage('test'){
            agent {
                docker {
                    image 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            when {
                changeset "**/worker/**"
            }
            steps {
                echo 'Running Unit Tests on Worker app'
                dir('worker'){
                 sh 'mvn clean test'
                 }
            }
        }
        stage('package'){
            agent {
                docker {
                    image 'maven:3.6.1-jdk-8-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            when {
                branch 'master'
                changeset "**/worker/**"
            }
            steps {
                 echo 'Packaging Worker app'
                  dir('worker'){
                    sh 'mvn package -DskipTests'
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                  }
            }
        }
        stage('docker-package'){
            agent any
            when {
                changeset "**/worker/**"
            }
            steps {
                echo 'Packaging Worker app with Docker'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                        def workerImage = docker.build("rossenm222/worker:v${env.BUILD_ID}","./worker")
                        workerImage.push()
                        
                    }
                }
            }
        }
    }

    post {
        always {
           echo 'Build pipeline for worker is complete..'
        }
        failure {
            slackSend (message: "Build failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        success {
            slackSend (message: "Build successful - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}
